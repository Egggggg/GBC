pub fn init_io() -> [Option<u8>; 0x80] {
    // initial values from mooneye's test roms (misc/boot_hwio-C.s)
    let initial: [u8; 0x80] = [
        0xFF, 0x00, 0x7E, 0xFF, // FF00
        0x00, 0x00, 0x00, 0xF8, // FF04
        0xFF, 0xFF, 0xFF, 0xFF, // FF08
        0xFF, 0xFF, 0xFF, 0xE1, // FF0C
        0x80, 0xBF, 0xF3, 0xFF, // FF10
        0xBF, 0xFF, 0x3F, 0x00, // FF14
        0xFF, 0xBF, 0x7F, 0xFF, // FF18
        0x9F, 0xFF, 0xBF, 0xFF, // FF1C
        0xFF, 0x00, 0x00, 0xBF, // FF20
        0x77, 0xF3, 0xF1, 0xFF, // FF24
        0xFF, 0xFF, 0xFF, 0xFF, // FF28
        0x00, 0x00, 0x00, 0x00, // FF2C
        0x00, 0x00, 0x00, 0x00, // FF30
        0x00, 0x00, 0x00, 0x00, // FF34
        0x00, 0x00, 0x00, 0x00, // FF38
        0x00, 0x00, 0x00, 0x00, // FF3C
        0x00, 0x00, 0x00, 0x00, // FF40
        0x00, 0x00, 0x00, 0xFC, // FF44
        0x00, 0x00, 0x00, 0x00, // FF48
        0xFF, 0xFF, 0xFF, 0xFE, // FF4C
        0xFF, 0xFF, 0xFF, 0xFF, // FF50
        0xFF, 0xFF, 0xFF, 0xFF, // FF54
        0xFF, 0xFF, 0xFF, 0xFF, // FF58
        0xFF, 0xFF, 0xFF, 0xFF, // FF5C
        0xFF, 0xFF, 0xFF, 0xFF, // FF60
        0xFF, 0xFF, 0xFF, 0xFF, // FF64
        0xC8, 0xFF, 0xD0, 0xFF, // FF68
        0xFF, 0xFF, 0xFF, 0xFF, // FF6C
        0xFF, 0xFF, 0x00, 0x00, // FF70
        0xFF, 0x8F, 0x00, 0x00, // FF74
        0xFF, 0xFF, 0xFF, 0xFF, // FF78
        0xFF, 0xFF, 0xFF, 0xFF, // FF7C
    ];

    // 1s are initialized, 0s are uninitialized
    let init_map: [u32; 4] = [
        0b11110111_11111111_11111111_11111111,
        0b11111111_11111111_00000000_00000000,
        0b00110101_00111111_11111111_11111111,
        0b11111111_11111111_11111111_11111111,
    ];

    let mut memory: [Option<u8>; 0x80] = [None; 0x80];

    for i in 0..4 {
        let map = init_map[i];

        for bit in 0..32 {
            let init_idx = bit * i;
            let dist_from_side = init_idx / (i + 1);

            if map & (1 << 31 - dist_from_side) > 0 {
                memory[init_idx] = Some(initial[init_idx]);
            } else {
                memory[init_idx] = None;
            }
        }
    }

    for i in memory[0..12].iter() {
        match i {
            Some(e) => println!("{e:#04X}"),
            None => println!("None --"),
        }
    }

    memory
}
